---
title: "Task 2 - Securing pod to pod traffic"
chapter: false
menuTitle: "East-West with cFOS"
weight: 5
---

East-West traffic in the context of container-based environments, particularly with Kubernetes, refers to the data flow between different nodes or pods within the same data center or network. This type of traffic is crucial for the performance and security of microservices architectures, where multiple services need to communicate with each other frequently.

Microservices break down applications into smaller, independent services, which increases the amount of East-West traffic. Each service might be running in different containers that need to communicate with each other.

![imagespod](../images/cfosptop.png)


Since multus is already installed, let confogure and secure pod to pod traffic with CFOS.

1. Create a namespace. 
```bash
cfosnamespace="cfosegress"
kubectl create namespace $cfosnamespace
```

2. Create NAD 

This NAD will create a subnet 10.1.200.0/24 with few static route configured point to default router to cFOS.
 


```bash
kubectl create namespace app1
cat <<EOF | kubectl create -n app1 -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: nadapplication200
spec:
  config: '{
      "cniVersion": "0.3.0",
      "type": "macvlan",
      "master": "eth0",
      "mode": "bridge",
      "ipam": {
        "type": "host-local",
        "subnet": "10.1.200.0/24",
        "rangeStart": "10.1.200.20",
        "rangeEnd": "10.1.200.100",
        "routes": [
         { "dst": "1.1.1.1/32", "gw": "10.1.200.252"},
         { "dst": "34.117.186.0/24", "gw": "10.1.200.252"},
         { "dst": "10.1.100.0/24", "gw": "10.1.200.252"} 
        ],
        "gateway": "10.1.200.252"
      }
    }'
EOF
```

3. Deploy application in app1 namespace and attach to NAD

```bash
cat <<EOF | kubectl create -n app1 -f -
apiVersion: v1
kind: Pod
metadata:
  name: diag200
  labels: 
    app: diag
  annotations:
    k8s.v1.cni.cncf.io/networks: '[ { "name": "nadapplication200" } ]'
spec:
  containers:
  - name: praqma
    image: praqma/network-multitool
    args: 
      - /bin/sh
      - -c 
      - /usr/sbin/nginx -g "daemon off;"
    securityContext:
      capabilities:
        add: ["NET_ADMIN","SYS_ADMIN","NET_RAW"]
    volumeMounts:
    - name: host-root
      mountPath: /host
  volumes:
  - name: host-root
    hostPath:
      path: /
      type: Directory
EOF
```

4. Repeat the same for Pod2 by creating namespace app2

```bash
kubectl create namespace app2
```

5. Create NAD for pod2

```bash
cat <<EOF | kubectl create -n app2 -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: nadapplication100
spec:
  config: '{
      "cniVersion": "0.3.0",
      "type": "macvlan",
      "master": "eth0",
      "mode": "bridge",
      "ipam": {
        "type": "host-local",
        "subnet": "10.1.100.0/24",
        "rangeStart": "10.1.100.20",
        "rangeEnd": "10.1.100.100",
        "routes": [
         { "dst": "1.1.1.1/32", "gw": "10.1.100.252"},
         { "dst": "34.117.186.0/24", "gw": "10.1.100.252"},
         { "dst": "10.1.200.0/24", "gw": "10.1.100.252"} 
        ],
        "gateway": "10.1.100.252"
      }
    }'
EOF
```

6. Create Pod2 using NAD above. 

```bash
cat <<EOF | kubectl create -n app2 -f -
apiVersion: v1
kind: Pod
metadata:
  name: diag100
  labels: 
    app: diag
  annotations:
    k8s.v1.cni.cncf.io/networks: '[ { "name": "nadapplication100" } ]'
spec:
  containers:
  - name: praqma
    image: praqma/network-multitool
    args: 
      - /bin/sh
      - -c 
      - /usr/sbin/nginx -g "daemon off;"
    securityContext:
      capabilities:
        add: ["NET_ADMIN","SYS_ADMIN","NET_RAW"]
    volumeMounts:
    - name: host-root
      mountPath: /host
  volumes:
  - name: host-root
    hostPath:
      path: /
      type: Directory
EOF
```

7. Get IP from application.

```k exec -it po/diag200 -n app-1 -- ip address show dev net1 | grep 'inet 10.1'```

output:

```
inet 10.1.200.20/24 brd 10.1.200.255 scope global net1
```

```k exec -it po/diag100 -n app-2 -- ip address show dev net1 | grep 'inet 10.1'```

output:

```
inet 10.1.100.20/24 brd 10.1.100.255 scope global net1
```

8. Lets deploy CFOS by creating a name space for CFOS.

```kubectl create namespace cfostest```

9. create NAD for pod1 network and another NAD for pod2 network.


```bash
cat <<EOF | kubectl create -n cfostest -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: cfosdefaultcni6100
spec:
  config: '{
      "cniVersion": "0.3.0",
      "type": "macvlan",
      "master": "eth0",
      "mode": "bridge",
      "ipam": {
        "type": "host-local",
        "subnet": "10.1.100.0/24",
        "rangeStart": "10.1.100.252",
        "rangeEnd": "10.1.100.252",
        "gateway": "10.1.100.1"
      }
    }'
EOF
```

```bash
cat <<EOF | kubectl create -n cfostest -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: cfosdefaultcni6
spec:
  config: '{
      "cniVersion": "0.3.0",
      "type": "macvlan",
      "master": "eth0",
      "mode": "bridge",
      "ipam": {
        "type": "host-local",
        "subnet": "10.1.200.0/24",
        "rangeStart": "10.1.200.252",
        "rangeEnd": "10.1.200.252",
        "gateway": "10.1.200.1"
      }
    }'
EOF
```

10. Create Role and Clusterrole bindings in cfostest namespace.

```bash
cat <<EOF | kubectl create -n cfostest -f -
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cfos-serviceaccount
imagePullSecrets:
- name: cfosimagepullsecret

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: configmap-reader
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "watch", "list"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-configmaps
subjects:
- kind: ServiceAccount
  name: cfos-serviceaccount
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: configmap-reader
  apiGroup: ""

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
   name: secrets-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-secrets
subjects:
- kind: ServiceAccount
  name: cfos-serviceaccount
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: secrets-reader
  apiGroup: ""
EOF
```

11. Create image pull secret.

```bash
[ -n "$accessToken" ] && $scriptDir/imagepullsecret.yaml.sh || echo "please set \$accessToken"
kubectl apply -f cfosimagepullsecret.yaml -n cfostest
kubectl get sa -n cfostest 

```

12. License apply in cfostest.

```kubectl apply -f cfos_license.yaml -n cfostest```


13. Create CFOS deployment using NAD100 and NAD200 network.

```bash
cat <<EOF | kubectl create -n cfostest -f -
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cfos-deployment-2
spec:
  selector:
    matchLabels:
      app: cfos
  template:
    metadata:
      labels:
        app: cfos
      annotations:
        k8s.v1.cni.cncf.io/networks: '[ { "name": "cfosdefaultcni6",  "ips": [ "10.1.200.252/32" ], "mac": "CA:FE:C0:FF:00:02"  }, { "name": "cfosdefaultcni6100",  "ips": [ "10.1.100.252/32" ], "mac": "CA:FE:C0:FF:01:00" } ]'
    spec:
      serviceAccountName: cfos-serviceaccount
      containers:
      - name: cfos
        image: interbeing/fos:latest
        securityContext:
          capabilities:
            add: ["NET_ADMIN", "SYS_ADMIN", "NET_RAW"]
        volumeMounts:
        - mountPath: /data
          name: data-volume
      volumes:
      - name: data-volume
        emptyDir: {}
EOF
```

14. Check CFOS IP.

```k exec -it po/cfos-deployment-2-wjlg6 -n cfostest -- sh```
```# ip a```

output:

```
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
3: eth0@if11: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UP group default 
    link/ether f2:0f:1a:16:b0:a1 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 10.244.48.4/32 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::f00f:1aff:fe16:b0a1/64 scope link 
       valid_lft forever preferred_lft forever
4: net1@if2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
    link/ether ca:fe:c0:ff:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 10.1.200.252/24 brd 10.1.200.255 scope global net1
       valid_lft forever preferred_lft forever
    inet6 fe80::c8fe:c0ff:feff:2/64 scope link 
       valid_lft forever preferred_lft forever
5: net2@if2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
    link/ether ca:fe:c0:ff:01:00 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 10.1.100.252/24 brd 10.1.100.255 scope global net2
       valid_lft forever preferred_lft forever
    inet6 fe80::c8fe:c0ff:feff:100/64 scope link 
       valid_lft forever preferred_lft forever
# 
```

15. Check the connectivity between pod1 application to pod2 application

```k exec -it po/diag200 -n app-1 -- ping 10.1.100.20```

output:

```
PING 10.1.100.20 (10.1.100.20) 56(84) bytes of data.
64 bytes from 10.1.100.20: icmp_seq=1 ttl=63 time=0.110 ms
64 bytes from 10.1.100.20: icmp_seq=2 ttl=63 time=0.073 ms
64 bytes from 10.1.100.20: icmp_seq=3 ttl=63 time=0.077 ms
```

and 

```k exec -it po/diag100 -n app-2 -- ping 10.1.200.20```

output:

```
PING 10.1.200.20 (10.1.200.20) 56(84) bytes of data.
64 bytes from 10.1.200.20: icmp_seq=1 ttl=63 time=0.069 ms
64 bytes from 10.1.200.20: icmp_seq=2 ttl=63 time=0.068 ms
```

15. Config firewall policy on CFOS with configmap

```bash
cat <<EOF | kubectl create -n cfostest -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: net1net2
  labels:
      app: fos
      category: config
data:
  type: partial
  config: |-
    config firewall policy
        edit 100
            set utm-status enable
            set name "net1tointernet"
            set srcintf "net1"
            set dstintf "eth0"
            set srcaddr "all"
            set dstaddr "all"
            set service "ALL"
            set ssl-ssh-profile "deep-inspection"
            set av-profile "default"
            set ips-sensor "high_security"
            set application-list "default"
            set nat enable
            set logtraffic all
        next
    end
    config firewall policy
        edit 101
            set utm-status enable
            set name "net2tointernet"
            set srcintf "net2"
            set dstintf "eth0"
            set srcaddr "all"
            set dstaddr "all"
            set service "ALL"
            set ssl-ssh-profile "deep-inspection"
            set av-profile "default"
            set ips-sensor "high_security"
            set application-list "default"
            set nat enable
            set logtraffic all
        next
    end
EOF
```

16. test IPS feature: 

- without IPS signature

```$ k exec -it po/diag100 -n app-2 -- curl  -I  http://10.1.200.20```

output:

```
HTTP/1.1 200 OK
Server: nginx/1.18.0
Date: Fri, 17 May 2024 02:20:05 GMT
Content-Type: text/html
Content-Length: 1558
Last-Modified: Fri, 17 May 2024 01:57:20 GMT
Connection: keep-alive
ETag: "6646b980-616"
Accept-Ranges: bytes
```

- with IPS signature

```k exec -it po/diag100 -n app-2  -- curl  -H "User-Agent: () { :; }; /bin/ls" http://10.1.200.20```


output:

**No reply or timeout**


17. Check IPS log


- ```k exec -it po/cfos-deployment-2-wjlg6 -n cfostest -- sh```
- ```# cd /var/log/log```
- ```# tail ips.0```

output:

```
date=2024-05-17 time=02:23:35 eventtime=1715912615 tz="+0000" logid="0419016384" type="utm" subtype="ips" eventtype="signature" level="alert" severity="critical" srcip=10.1.100.20 dstip=10.1.200.20 srcintf="net2" dstintf="net1" sessionid=1 action="dropped" proto=6 service="HTTP" policyid=11 attack="Bash.Function.Definitions.Remote.Code.Execution" srcport=39810 dstport=80 hostname="10.1.200.20" url="/" direction="outgoing" attackid=39294 profile="high_security" incidentserialno=134217729 msg="applications3: Bash.Function.Definitions.Remote.Code.Execution"
```
